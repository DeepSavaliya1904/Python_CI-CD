# GitHub Actions workflow for Django CI with SQLite
name: Django CI with SQLite

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables available to all jobs
env:
  DJANGO_SETTINGS_MODULE: DemoProject.settings
  SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

# Define the jobs to be executed
jobs:
  test:
    # Name of the job
    name: Run Tests
    # Run on the latest Ubuntu environment
    runs-on: ubuntu-latest
    # Define a matrix to test multiple Python and Django versions
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        django-version: ['4.2', '5.0']
        # Exclude incompatible combination of Python 3.9 with Django 5.0
        exclude:
          - python-version: '3.9'
            django-version: '5.0'
      # Continue testing other matrix combinations even if one fails
      fail-fast: false

    # Define the steps for the test job
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django==${{ matrix.django-version }} flake8 coverage pytest pytest-django
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 4: Run Django migrations
      - name: Run migrations
        run: |
          python manage.py makemigrations --check --dry-run
          python manage.py migrate
        continue-on-error: true

      # Step 5: Run unit tests with coverage
      - name: Run unit tests with coverage
        run: |
          coverage run -m pytest tests/unit
          coverage report --fail-under=80

      # Step 6: Build a Docker image for the Django application
      - name: Build Docker image
        run: |
          docker build -t my-django-app:${{ matrix.python-version }}-${{ matrix.django-version }} \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
            --build-arg DJANGO_VERSION=${{ matrix.django-version }} .

      # Step 7: Run a Docker container for integration testing
      - name: Run Docker container for integration testing
        run: |
          docker run -d -p 8000:8000 --name django-test \
            -e DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            my-django-app:${{ matrix.python-version }}-${{ matrix.django-version }}
          sleep 5
          curl --fail http://localhost:8000 || exit 1

      # Step 8: Run integration tests in Docker
      - name: Run integration tests
        run: |
          docker exec django-test coverage run -m pytest tests/integration
          docker exec django-test coverage report --fail-under=80

      # Step 9: Generate and upload coverage report
      - name: Generate and upload coverage report
        run: |
          docker exec django-test coverage xml
          docker cp django-test:/app/coverage.xml .
        # Optional: Add Codecov upload if needed
        # - name: Upload coverage to Codecov
        #   uses: codecov/codecov-action@v4
        #   with:
        #     token: ${{ secrets.CODECOV_TOKEN }}
        #     files: ./coverage.xml
        #     fail_ci_if_error: false
